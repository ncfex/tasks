// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET is_completed = TRUE
WHERE id = $1
RETURNING id, description, is_completed, created_at, due_date
`

func (q *Queries) CompleteTask(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, completeTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.DueDate,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, description, is_completed, created_at, due_date)
VALUES (
    gen_random_uuid(),
    $1,
    FALSE,
    NOW(),
    $2
)
RETURNING id, description, is_completed, created_at, due_date
`

type CreateTaskParams struct {
	Description string
	DueDate     time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.Description, arg.DueDate)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.DueDate,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, description, is_completed, created_at, due_date 
FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, description, is_completed, created_at, due_date
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.DueDate,
	)
	return i, err
}

const getTaskByPartialId = `-- name: GetTaskByPartialId :one
SELECT id, description, is_completed, created_at, due_date
FROM tasks
WHERE id::text LIKE $1 || '%'
LIMIT 1
`

func (q *Queries) GetTaskByPartialId(ctx context.Context, dollar_1 sql.NullString) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByPartialId, dollar_1)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.DueDate,
	)
	return i, err
}
